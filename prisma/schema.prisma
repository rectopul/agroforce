generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model city {
  id   Int     @id
  ufid Int
  nome String? @db.Char(255)

  @@index([ufid], map: "ufid")
}

model config_gerais {
  id             Int      @id @default(autoincrement())
  itens_per_page Int?
  updated_at     DateTime @default(now())
  updated_by     Int
}

model culture {
  id             Int              @id @default(autoincrement())
  name           String?          @unique(map: "Culture_name_key")
  created_at     DateTime         @default(now())
  created_by     Int
  status         Int              @default(1)
  safra          safra[]
  users_cultures users_cultures[]
  portfolio      portfolio[]
  users_permissions      users_permissions[]
  ogm      ogm[]
  foco      foco[]
  type_assay      type_assay[]
  delineamento      delineamento[]
}

model department {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "Department_name_key")
  status     Int      @default(1)
  created_at DateTime @default(now())
  created_by Int
  user       user[]
}

model modules {
  id                Int                 @id @default(autoincrement())
  module            String              @unique(map: "Modules_module_key")
  users_preferences users_preferences[]
}

model profile {
  id                Int                 @id @default(autoincrement())
  name              String
  acess_permission  String
  created_at        DateTime            @default(now())
  created_by        Int
  status            Int?
  users_permissions users_permissions[]
}

model safra {
  id                Int       @id @default(autoincrement())
  id_culture        Int
  culture           culture   @relation(fields: [id_culture], references: [id])
  year              String    @unique
  typeCrop          String
  plantingStartTime String
  plantingEndTime   String
  main_safra        Int?      @default(0)
  status            Int?      @default(1)
  created_by        Int
  created_at        DateTime? @default(now())
}

model uf {
  id    Int     @id
  nome  String? @db.Char(255)
  sigla String? @db.Char(2)
}

model user {
  id                Int                 @id @default(autoincrement())
  name              String?
  email             String              @unique(map: "User_email_key")
  cpf               String              @unique(map: "User_cpf_key")
  tel               String?
  password          String
  avatar            String?
  registration      Int?
  departmentId      Int
  jivochat          Int?                @default(0)
  app_login         Int?                @default(1)
  status            Int                 @default(1)
  created_at        DateTime            @default(now())
  created_by        Int
  department        department          @relation(fields: [departmentId], references: [id], map: "User_departmentId_fkey")
  users_cultures    users_cultures[]
  users_permissions users_permissions[]
  users_preferences users_preferences[]

  @@index([departmentId], map: "User_departmentId_fkey")
}

model users_cultures {
  id         Int      @id @default(autoincrement())
  userId     Int
  cultureId  Int
  created_at DateTime @default(now())
  created_by Int
  status     Int      @default(0)
  culture    culture  @relation(fields: [cultureId], references: [id], map: "Users_Cultures_cultureId_fkey")
  user       user     @relation(fields: [userId], references: [id], map: "Users_Cultures_userId_fkey")

  @@index([cultureId], map: "Users_Cultures_cultureId_fkey")
  @@index([userId], map: "Users_Cultures_userId_fkey")
}

model users_permissions {
  id         Int      @id @default(autoincrement())
  userId     Int
  profileId  Int
  cultureId  Int
  created_at DateTime @default(now())
  created_by Int
  status     Int
  profile    profile  @relation(fields: [profileId], references: [id], map: "Users_Permissions_profileId_fkey")
  user       user     @relation(fields: [userId], references: [id], map: "Users_Permissions_userId_fkey")
  culture    culture  @relation(fields: [cultureId], references: [id])

  @@index([profileId], map: "Users_Permissions_profileId_fkey")
  @@index([cultureId], map: "Users_Permissions_cultureId_fkey")
  @@index([userId], map: "Users_Permissions_userId_fkey")
}

model users_preferences {
  id                Int      @id @default(autoincrement())
  userId            Int
  module_id         Int
  table_preferences String?
  updated_at        DateTime @default(now())
  modules           modules  @relation(fields: [module_id], references: [id], map: "Users_Preferences_module_id_fkey")
  user              user     @relation(fields: [userId], references: [id], map: "Users_Preferences_userId_fkey")

  @@index([module_id], map: "Users_Preferences_module_id_fkey")
  @@index([userId], map: "Users_Preferences_userId_fkey")
}

model local {
  id             Int              @id @default(autoincrement())
  name           String
  pais           String
  uf             String
  city           String
  address        String
  latitude       String
  longitude      String
  altitude       String
  created_at     DateTime         @default(now())
  created_by     Int
  status         Int              @default(1)
  layoult_quadra layoult_quadra[]
}

model layoult_quadra {
  id             Int      @id @default(autoincrement())
  esquema        String
  op             String
  semente_metros Int
  disparos       Int
  divisor        Int
  largura        String
  comp_fisico    String
  comp_parcela   String
  comp_corredor  String
  t4_inicial     Int
  t4_final       Int
  df_inicial     Int
  df_final       Int
  localId        Int
  status         Int      @default(1)
  created_by     Int
  created_at     DateTime @default(now())
  local          local    @relation(fields: [localId], references: [id])
}

model portfolio {
  id         Int       @id @default(autoincrement())
  id_culture Int
  genealogy  String
  cruza      String
  status     Int       @default(1)
  created_by Int
  created_at DateTime  @default(now())
  culture    culture   @relation(fields: [id_culture], references: [id])
  lote lote[]
}

model delineamento {
  id             Int       @id @default(autoincrement())
  id_culture     Int
  name           String
  repeticao      Int
  trat_repeticao Int
  status         Int       @default(1)
  created_by     Int
  created_at     DateTime? @default(now())

  culture culture @relation(fields: [id_culture], references: [id])
}

model foco {
  id          Int @id @default(autoincrement())
  id_culture  Int
  name        String
  status      Int?       @default(1)
  created_by  Int
  created_at  DateTime? @default(now())

  culture culture @relation(fields: [id_culture], references: [id])
}
model type_assay {
  id             Int       @id @default(autoincrement())
  id_culture  Int
  name           String
  status         Int       @default(1)
  created_by     Int
  created_at     DateTime? @default(now())

  culture culture @relation(fields: [id_culture], references: [id])
}

model ogm {
  id             Int       @id @default(autoincrement())
  id_culture     Int
  name           String
  status         Int       @default(1)
  created_by     Int
  created_at     DateTime? @default(now())

  culture culture @relation(fields: [id_culture], references: [id])
}

model lote {
  id            Int @id @default(autoincrement())
  id_portfolio  Int
  name          String
  volume        Int
  status        Int       @default(1)
  created_by    Int
  created_at    DateTime @default(now())
  portfolio portfolio @relation(fields: [id_portfolio], references: [id])
}
