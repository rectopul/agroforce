import { ImportValidate, IReturnObject } from '../../interfaces/shared/Import.interface';
import handleError from '../../shared/utils/handleError';
import { responseGenericFactory, responseNullFactory } from '../../shared/utils/responseErrorFactory';
import { CulturaController } from '../cultura.controller';
import { TecnologiaController } from './tecnologia.controller';

export class ImportTechnologyController {
  static async validate({
    spreadSheet, idCulture, created_by: createdBy,
  }: ImportValidate): Promise<IReturnObject> {
    const culturaController = new CulturaController();
    const tecnologiaController = new TecnologiaController();
    const responseIfError: any = [];
    try {
      spreadSheet.forEach((item: any, row: number) => {
        if (row !== 0) {
          item.forEach(async (_: any, column: number) => {
            if (column === 1) {
              if (spreadSheet[row][column] === null) {
                responseIfError[column]
                  += responseNullFactory((column + 1), (row + 1), spreadSheet[0][column]);
              } else if ((spreadSheet[row][column]).toString().length > 2) {
                responseIfError[Number(column)]
                  += responseGenericFactory(
                    (column + 1),
                    (row + 1),
                    spreadSheet[0][column],
                    'o limite de caracteres e 2',
                  );
              } else if ((typeof (spreadSheet[row][column])) === 'number' && spreadSheet[row][column].toString().length < 2) {
                // eslint-disable-next-line no-param-reassign
                spreadSheet[row][column] = `0${spreadSheet[row][column].toString()}`;
              }
            } else if (column === 2) {
              if (spreadSheet[row][column] === null) {
                responseIfError[column]
                  += responseNullFactory((column + 1), (row + 1), spreadSheet[0][column]);
              }
            } else if (column === 4) {
              if (spreadSheet[row][column] === null) {
                responseIfError[column]
                  += responseNullFactory((column + 1), (row + 1), spreadSheet[0][column]);
              } else {
                const { status, response }: IReturnObject = await culturaController.getAllCulture(
                  { name: spreadSheet[row][column] },
                );
                console.log('spreadSheet[row][column]');
                console.log(spreadSheet[row][column]);

                console.log('status');
                console.log(status);

                console.log('response');
                console.log(response);
                if (status === 400) {
                  if (response?.length === 0) {
                    responseIfError[column]
                      += responseGenericFactory(
                        (column + 1),
                        (row + 1),
                        spreadSheet[0][column],
                        'a cultura não esta cadastrada',
                      );
                    console.log('responseIfError');
                    console.log(responseIfError);
                  } else {
                    const {
                      status: statusCulture,
                      response: responseCulture,
                    }: IReturnObject = await culturaController.getOneCulture(idCulture);
                    if (statusCulture === 200) {
                      if (responseCulture?.name !== spreadSheet[row][column]) {
                        responseIfError[column]
                          += responseGenericFactory(
                            (column + 1),
                            (row + 1),
                            spreadSheet[0][column],
                            'a cultura e diferente da cultura selecionada',
                          );
                      }
                    }
                  }
                }
              }
            } else if (column === 5) {
              if (spreadSheet[row][column] === null) {
                responseIfError[column]
                  += responseNullFactory((column + 1), row, spreadSheet[0][column]);
              } else {
                const { status, response }: IReturnObject = await tecnologiaController.getAll(
                  { idCulture, cod_tec: String(spreadSheet[row][1]) },
                );
                if (status === 200) {
                  if (response.length === 0) {
                    if (response.dt_import > spreadSheet[row][column]) {
                      responseIfError[column]
                        += responseGenericFactory(
                          (column + 1),
                          (row + 1),
                          spreadSheet[0][column],
                          'essa informação é mais antiga do que a informação do software',
                        );
                    }
                  }
                }
              }
            }
          });
        }
      });
      console.log('responseIfError');
      console.log(responseIfError);

      // if (responseIfError.length === 0) {
      //   try {
      //     spreadSheet.forEach(async (item: any, row: number) => {
      //       if (row !== 0) {
      //         const { response: culture }: IReturnObject = await culturaController.getAllCulture({
      //           name: spreadSheet[row][4],
      //         });
      //         const { status, response }: IReturnObject = await tecnologiaController.getAll(
      //           { idCulture, cod_tec: (spreadSheet[row][1].toString()) },
      //         );
      //         if (status === 200) {
      //           await tecnologiaController.update({
      //             id: response[0]?.id,
      //             id_culture: response[0]?.id,
      //             cod_tec: String(spreadSheet[row][1]),
      //             name: spreadSheet[row][2],
      //             desc: spreadSheet[row][3],
      //             created_by: createdBy,
      //             dt_import: new Date(spreadSheet[row][5]),
      //           });
      //         } else {
      //           await tecnologiaController.create({
      //             id_culture: culture[0]?.id,
      //             cod_tec: String(spreadSheet[row][1]),
      //             name: spreadSheet[row][2],
      //             desc: spreadSheet[row][3],
      //             created_by: createdBy,
      //             dt_import: new Date(spreadSheet[row][5]),
      //           });
      //         }
      //       }
      //     });
      //     return { status: 200, message: 'Tecnologia importado com sucesso' };
      //   } catch (error: any) {
      //     handleError('Tecnologia controller', 'Save Import', error.message);
      //     return { status: 500, message: 'Erro ao salvar planilha de tecnologia' };
      //   }
      // }

      const responseStringError = responseIfError.join('').replace(/undefined/g, '');
      return { status: 400, message: responseStringError };
    } catch (error: any) {
      handleError('Tecnologia controller', 'Validate Import', error.message);
      return { status: 500, message: 'Erro ao validar planilha de tecnologia' };
    }
  }
}
